#!/opt/php/5.6/bin/php
<?php # (jEdit options) :folding=explicit:collapseFolds=1:
/*****************************************************************************
INPUTS / SWITCHES (via $_SERVER['argv']):
    inDir           the a directory of files ending in ".pdb"
    -q              quiet mode (no progress messages)
    -filter         operate in Unix filter mode (stdin to stdout)
    -nostats        don't output info from PDB headers
    -noclash        don't output/calc clashscore, etc.
    -nocbeta        don't output/calc C-beta deviations
    -norota         don't output/calc rotamer outliers
    -norama         don't output/calc Ramachandran outliers
    -nogeom         don't output/calc bond geometry outliers
    -dopucker       do RNA base phosphate perpendicular distance calc
    -dosuite        do RNA suite conformation analysis

OUTPUTS / RESULTS:
    Runs clash, Rama, rota, Cb dev analysis on all input files.

*****************************************************************************/
// EVERY *top-level* page must start this way:
// 1. Define it's relationship to the root of the MolProbity installation.
// Pages in subdirectories of lib/ or public_html/ will need more "/.." 's.
    ob_start();
    if(!defined('MP_BASE_DIR')) define('MP_BASE_DIR', realpath(dirname(__FILE__).'/..'));
// 2. Include core functionality - defines constants, etc.
    require_once(MP_BASE_DIR.'/lib/core.php');
    require_once(MP_BASE_DIR.'/lib/model.php');
    require_once(MP_BASE_DIR.'/lib/analyze.php');
    require_once(MP_BASE_DIR.'/lib/eff_resol.php');
// 3. Restore session data. If you don't want to access the session
// data for some reason, you must call mpInitEnvirons() instead.
    mpInitEnvirons();       // use std PATH, etc.
    //mpStartSession(true);   // create session dir
// 5. Set up reasonable values to emulate CLI behavior if we're CGI
    set_time_limit(0); // don't want to bail after 30 sec!
// 6. Unlimited memory for processing large files:
    ini_set('memory_limit', -1);

#{{{ oneSession - setup, execution, and cleanup for one validation
############################################################################
/**
* Uses one session per file processed to avoid overflowing space requirements.
*/
function oneSession($inpath)
{
    mpStartSession(true); // create a new session
    // Need to ignore segIDs for stupid Top500 with seg new_ for all H
    $id = addModelOrEnsemble(
            $inpath,
            basename($inpath),
            false,
            true,
            true,
            false);
    if(isset($_SESSION['ensembles'][$id]))
    {
        foreach($_SESSION['ensembles'][$id]['models'] as $modelID)
        {
            echo basename($_SESSION['models'][$modelID]['pdb']);
            echo summaryAnalysis($modelID);
        }
    }
    else
    {
        echo basename($inpath);
        echo summaryAnalysis($id);
    }
    // Clean up and go home
    mpDestroySession();
}
#}}}########################################################################

#{{{ summaryAnalysis - run all analysis for one file
############################################################################
/**
* Uses one session per file processed to avoid overflowing space requirements.
*/
function summaryAnalysis($modelID)
{
    global $optStats, $optClash, $optCbeta, $optRota, $optRama, $optOmega, $optCablam, $optGeom, $optUndowser, $optPuck, $optSuite;
    $out = "";

    $model =& $_SESSION['models'][$modelID];
    $reduce_blength = $_SESSION['reduce_blength'];
    //$bcutval = 40; TO-DO - make these user controllable
    //$ocutval = 10;

    $out .= ":$reduce_blength";

    if($optStats)
    {
        $pdbstats = $model['stats'];
        $out .= ":$pdbstats[chains]:$pdbstats[residues]:$pdbstats[nucacids]:$pdbstats[resolution]:$pdbstats[rvalue]:$pdbstats[rfree]";
    }

    // Run analysis; load data
    $pdbfile = $_SESSION['dataDir'].'/'.MP_DIR_MODELS."/$model[pdb]";
    $rawDir  = $_SESSION['dataDir'].'/'.MP_DIR_RAWDATA;
        if(!file_exists($rawDir)) mkdir($rawDir, 0777);

    $summaries = array();

    if($optClash)
    {
        //runClashlist($pdbfile, "$rawDir/$model[prefix]clash.data", $reduce_blength);
        //$clash = loadClashlist("$rawDir/$model[prefix]clash.data");
        runClashscore($pdbfile, "$rawDir/$model[prefix]clash.data", $reduce_blength);
        $clash = loadClashscore("$rawDir/$model[prefix]clash.data");
        $clashstats = runClashStats($pdbstats['resolution'], $clash['scoreAll'], $clash['scoreBlt40']);
        $out .= ":" . $clash['scoreAll'] . ":" . $clash['scoreBlt40'];
        $out .= ":$clashstats[minresol]:$clashstats[maxresol]:$clashstats[n_samples]:$clashstats[pct_rank]:$clashstats[pct_rank40]";
    }
    if($optCbeta)
    {
        runCbetaDev($pdbfile, "$rawDir/$model[prefix]cbdev.data");
        $cbdev = loadCbetaDev("$rawDir/$model[prefix]cbdev.data");
        $badCbeta = findCbetaOutliers($cbdev);
        //$cbStats = calcCbetaStats($cbdev);
        $out .= ":" . count($badCbeta) . ":" . count($cbdev);
        //$out .= ":$cbStats[max]:$cbStats[median]:".round($cbStats['mean'], 3);
    }
    if($optRota)
    {
        //This should also switch to summaries
        runRotamer($pdbfile, "$rawDir/$model[prefix]rota.data");
        $rota = loadRotamer("$rawDir/$model[prefix]rota.data");
        $badRota = findRotaOutliers($rota);
        $rotaFav = 0;
        foreach($rota as $r) { if($r['eval'] == "Favored") $rotaFav++; }
        $out .= ":" . count($badRota) . ":" . $rotaFav . ":" . count($rota);
    }
    if($optRama)
    {
        runRamachandran($pdbfile, "$rawDir/$model[prefix]rama.data");
        $rama = loadRamachandran("$rawDir/$model[prefix]rama.data");
        $summaries['rama'] = loadRamachandranSummary("$rawDir/$model[prefix]rama.data");
        #$ramaStat = loadRamachandranSummary("$rawDir/$model[prefix]rama.data");
        #echo $ramaStat['favored']+0 . "\n";
        #echo $summaries['rama']['favored'] . "\n";
        #exit();
        #echo ":" . $summaries['rama']['outlier'] . ":" . $summaries['rama']['allowed'] . ":" . $summaries['rama']['favored'] . ":" . $summaries['rama']['residues'];
        #exit();
        $out .= ":" . ($summaries['rama']['outlier']+0) . ":" . ($summaries['rama']['allowed']+0) . ":" . ($summaries['rama']['favored']+0) . ":" . ($summaries['rama']['residues']+0);
    }
    if($optOmega)
    {
        runOmegalyze($pdbfile, "$rawDir/$model[prefix]omega.data");
        $omega = loadOmegalyze("$rawDir/$model[prefix]omega.data");
        $summaries['omega'] = loadOmegaSummary($omega);
        $out .= ":" . ($summaries['omega']['cisprocount']+0) . ":" . ($summaries['omega']['prototal']+0);
        $out .= ":" . ($summaries['omega']['cisnonprocount']+0) . ":" . ($summaries['omega']['nonprototal']+0);
        $out .= ":" . ($summaries['omega']['twistcount']+0) . ":" . ($summaries['omega']['totalres']+0);
    }
    if($optGeom)
    {
      // run validation, load results
      runValidationReport($pdbfile, "$rawDir/$model[prefix]geom.data", $model['stats']['use_cdl']);
      $bonds = array_merge(loadValidationBondReport("$rawDir/$model[prefix]geom.data", "protein"), loadValidationBondReport("$rawDir/$model[prefix]geom.data", "rna"));
      $angles = array_merge(loadValidationAngleReport("$rawDir/$model[prefix]geom.data", "protein"), loadValidationAngleReport("$rawDir/$model[prefix]geom.data", "rna"));
      makeChiralOutlierTable("$rawDir/$model[prefix]geom.data","$rawDir/$model[prefix]chirals.txt");
      $chiral_summary = load_chiral_summary("$rawDir/$model[prefix]chirals.txt");
      // BONDS
      $total = 0; // total residues
      $totalBonds = 0;
      $outCount = 0; // residues with at least one bond outlier
      $outBondCount = 0;
      foreach($bonds as $cnit => $item) {
        //if($item['type'] == 'protein') {
          if($item['isOutlier']) {
            $outBondCount += $item['outCount'];
            $outCount += 1;
          }
          $totalBonds += $item['bondCount'];
          $total += 1;
        //}
      }
      if ($total > 0) {
        $out .= ":$outBondCount:$totalBonds:".sprintf("%.2f", 100.0 * $outBondCount / $totalBonds);
        $out .= ":".sprintf("%.2f", 100.0 * $outCount / $total);
      }
      else            $out .= ":-1:-1:-1:-1";
      //echo "outliers:$outCount total:$total";
      // ANGLES
      $total = 0; // total residues
      $totalAng = 0;
      $outCount = 0; // residues with at least one angle outlier
      $outAngCount = 0;
      foreach($angles as $cnit => $item) {
        //if($item['type'] == 'protein') {
          if($item['isOutlier']) {
            $outAngCount += $item['outCount'];
            $outCount += 1;
          }
          $totalAng += $item['angCount'];
          $total += 1;
        //}
      }
      if ($total > 0) {
        $out .= ":$outAngCount:$totalAng:".sprintf("%.2f", 100.0 * $outAngCount / $totalAng);
        $out .= ":".sprintf("%.2f", 100.0 * $outCount / $total);
      }
      else            $out .= ":-1:-1:-1:-1";
      //echo "\noutliers:$outCount total:$total\n";
      // CHIRALS
      $total_cv_outliers = $chiral_summary['total_outliers'];
      $chiral_outliers = $chiral_summary['chiral_outliers'];
      $tetra_outliers = $chiral_summary['tetra_outliers'];
      $pseudo_outliers = $chiral_summary['pseudo_outliers'];
      //chiralSwaps:tetraOutliers:pseudochiralErrors
      $out .= ":".($chiral_outliers+0).":".($tetra_outliers+0).":".($pseudo_outliers+0);
    }
    if($optCablam)
    {
      runCablam($pdbfile, "$rawDir/$model[prefix]cablam.data");
      //$cablam = loadCablam("$rawDir/$model[prefix]cablam.data");
      $summaries['cablam'] = loadCablamSummary("$rawDir/$model[prefix]cablam.data");
      //:cablamOutlierPct:caGeomOutlierPct
      //$cablamOut = $summaries['cablam']['cablam_outlier_count'];
      //$caGeomOut = $summaries['cablam']['cageom_outlier_count'];
      $cablamOutPct = $summaries['cablam']['cablam_outlier_percent'];
      $caGeomPct = $summaries['cablam']['cageom_outlier_percent'];
      $out .= sprintf(':%.2f', $cablamOutPct);
      $out .= sprintf(':%.2f', $caGeomPct);
    }
    if($optUndowser)
    {
      runUnDowser($pdbfile, "$rawDir/$model[prefix]undowser.html");
      $undowser = loadUndowserSummary("$rawDir/$model[prefix]undowser.html");
      //":waterClashes:totalWaters"
      //'water_clashes' => $clashes,
      //'water_count' => $waters,
      //'water_clash_pct' => $clashpct);
      $out .= ":".($undowser['water_clashes']+0).":".($undowser['water_count']+0);
    }
    if($optClash && $optRota && $optRama)
    {
      $axr = $pdbstats['resolution'];                                     // Actual Xtalographic Resolution
      if ((count($rota) != 0) && (count($rama) != 0)) {
        $mer = getEffectiveResolution($clash, $rota, $rama, $summaries);    // MolProbity Effective Resolution
        $mer_pct = getEffectiveResolutionPercentile($mer, $axr);
        $out .= sprintf(':%.3f', $mer);
        $out .= sprintf(':%s', $mer_pct['pct_rank']);
      } else {
        $out .= '::';
      }
    }
    if($optPuck) {
      $outfile = "$rawDir/$model[prefix]pperp.data";
      runBasePhosPerp($pdbfile, $outfile);
      $pperp = loadBasePhosPerp($outfile);
      $badPperp = findBasePhosPerpOutliers($pperp);
      $out .= ":" . count($badPperp) . ":" . count($pperp);
    }
    if($optSuite) {
      $outfile = "$rawDir/$model[prefix]suitename.txt";
      runSuitenameReport($pdbfile, $outfile);
      $suites = loadSuitenameReport($outfile);
      $badSuites = findSuitenameOutliers($suites);
      $out .= ":" . count($badSuites) . ":" . count($suites);
    }

    $out .= "\n"; // end of this line
    return $out;
}
#}}}########################################################################

#{{{ a_function_definition - sumary_statement_goes_here
############################################################################
/**
* Documentation for this function.
*/
//function someFunctionName() {}
#}}}########################################################################

#{{{ helptext for users
$helptext = "
The oneline-analysis script provide whole-structure validation statistics
oneline-analysis accepts certain flags and a directory of .pdb files

By default, file statistics and general validations are ON.
These flag deactivate selected output and validations:
  -nostats     stats are chain and residue counts, resolution, and R values
  -noclash     all-atom contacts
  -nogeom      bond length and bond angle validation

By default, all protein validations are ON.
These flags deactivate selected validations:
  -nocbeta     C-beta atom position deviations
  -norota      sidechain rotamer outliers
  -norama      backbone ramachandran outliers
  -noprotein   turns off all the above protein-specific validations
If clash, rota, and rama are all on, MPscore and pct rank will be reported

By default, all RNA validations are OFF.
These flags activate selected validations:
  -dopucker    ribose sugar pucker validation
  -dosuite     RNA backbone suite validation
  -dorna       turns on all the above rna-specific validations

Other options:
  -h, -help    prints this help text
  -q           'quiet' mode, suppresses printing of column headers

";
#}}}

# MAIN - the beginning of execution for this page
############################################################################
// Default options
$optVerbose = true;
$optMode    = 'batch';
$optStats   = true;
$optClash   = true;
$optUndowser = true;
$optCbeta   = true;
$optRota    = true;
$optRama    = true;
$optGeom    = true;
$optOmega   = true;
$optCablam  = true;
$optPuck    = false;
$optSuite   = false;

// First argument is the name of this script...
if(is_array($_SERVER['argv'])) foreach(array_slice($_SERVER['argv'], 1) as $arg)
{
    if($arg == '-q')            $optVerbose = false;
    elseif($arg == '-filter')   $optMode = 'filter'; //function not clear
    elseif($arg == '-nostats')  $optStats = false;
    elseif($arg == '-noclash')  $optClash = false;
    elseif($arg == '-noundowser') $optUndowser = false;
    elseif($arg == '-nocbeta')  $optCbeta = false;
    elseif($arg == '-norota')   $optRota = false;
    elseif($arg == '-norama')   $optRama = false;
    elseif($arg == '-nogeom')   $optGeom = false;
    elseif($arg == '-noomega')  $optOmega = false;
    elseif($arg == '-nocablam') $optCablam = false;
    elseif($arg == '-dopucker') $optPuck = true;
    elseif($arg == '-dosuite')  $optSuite = true;
    elseif($arg == '-noprotein')
    {
      $optCbeta = false;
      $optRota = false;
      $optRama = false;
      $optOmega = false;
      $optCablam = false;
    }
    elseif($arg == '-dorna')
    {
      $optPuck = true;
      $optSuite = true;
    }
    elseif($arg == '-h' or $arg == '-help')                      die($helptext);
    elseif(!isset($inDir))      $inDir = $arg;
    else          die($helptext."Too many or unrecognized arguments: '$arg'\n");
}

if($optMode == 'filter')
{
    $inpath = mpTempfile("tmp_pdb_");
    #copy("php://stdin", $inpath); -- for some reason, this truncates the file
    mpCopy("php://stdin", $inpath);
    mpStartSession(true); // create a new session
    // Need to ignore segIDs for stupid Top500 with seg new_ for all H
    $id = addModelOrEnsemble(
            $inpath,
            basename($inpath),
            false,
            true,
            true,
            false);
    if(isset($_SESSION['ensembles'][$id]))
    {
        foreach($_SESSION['ensembles'][$id]['models'] as $modelID)
        {
            echo basename($_SESSION['models'][$modelID]['pdb']);
            echo summaryAnalysis($modelID);
        }
    }
    else
    {
        echo basename($inFile);
        echo summaryAnalysis($id);
    }
    // Clean up and go home
    mpDestroySession();
    unlink($inpath);
    die(); // remaining code is for "batch" mode
}

if(!isset($inDir))       die($helptext."No input file or directory specified.\n");
elseif(!is_dir($inDir) && !is_file($inDir))  die($helptext."Input file or directory '$inDir' does not exist.\n");

#{{{ column headers
if($optVerbose)
{
    echo "#INPUT  : ".realpath($inDir)."\n";

    // Describe the output of this script
    echo "#pdbFileName:x-H_type";
    if($optStats)   echo ":chains:residues:nucacids:resolution:rvalue:rfree";
    if($optClash)   echo ":clashscore:clashscoreB<40:minresol:maxresol:n_samples:pct_rank:pct_rank40";
    if($optCbeta)   echo ":cbeta>0.25:numCbeta";//:maxCbeta:medianCbeta:meanCbeta"; removed by jjh
    if($optRota)    echo ":rotaOutlier:rotaFavored:numRota";
    if($optRama)    echo ":ramaOutlier:ramaAllowed:ramaFavored:numRama";
    if($optOmega)   echo ":cisPro:totalPro:cisNonPro:totalNonPro:twistedPeptides:totalPeptides";
    if($optGeom)    echo ":numbadbonds:numbonds:pct_badbonds:pct_resbadbonds:numbadangles:numangles:pct_badangles:pct_resbadangles"; #bonds/angles
    if($optGeom)    echo ":chiralSwaps:tetraOutliers:pseudochiralErrors"; #chirals
    if($optCablam)  echo ":cablamOutlierPct:caGeomOutlierPct";
    if($optUndowser) echo ":waterClashes:totalWaters";
    if($optClash && $optRota && $optRama) echo ":MolProbityScore:Mol_pct_rank";
    if($optPuck)    echo ":numPperpOutliers:numPperp";
    if($optSuite)   echo ":numSuiteOutliers:numSuites";
    echo "\n";
}
#}}}

if(is_file($inDir))
{
    if(endsWith($inDir, ".pdb") or endsWith($inDir, ".ent"))
    {
        $inpath = $inDir;
        oneSession($inpath);
    }
    else
    {
        die($helptext."File is not a supported format. Supported structure file types are .pdb and .ent\n");
    }
}

elseif(is_dir($inDir))
    foreach(listDir($inDir) as $inFile) if(endsWith($inFile, ".pdb") or endsWith($inFile, ".ent"))
    {
        $inpath = $inDir.'/'.$inFile;
        oneSession($inpath);
    }

############################################################################
// Clean up and go home
//mpDestroySession(); // session creation/destriction now handled inside loops
?>
